{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "48970747",
   "metadata": {},
   "source": [
    "# This is an Employee Database Handling Application.\n",
    "\n",
    "This application allows you to:\n",
    "1. Add a new employee\n",
    "2. Display employeesâ€™ information\n",
    "3. Compute and print the name and compensation of all employees\n",
    "4. Search employees by name\n",
    "5. Check basic statistics of employees\n",
    "6. Calculate the reimbursement of one employee\n",
    "7. Exit the application"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "852c08cd",
   "metadata": {},
   "source": [
    "# To test this application create a file named empdata.dat in the same location as this python notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9ae6d078",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Vehicle:\n",
    "    def __init__(self, vmk, vmd, vy, vml):\n",
    "        self.__make = vmk\n",
    "        self.__model = vmd\n",
    "        self.__year = vy\n",
    "        self.__mileage = vml\n",
    "\n",
    "    def get_make(self):\n",
    "        return self.__make\n",
    "\n",
    "    def get_model(self):\n",
    "        return self.__model\n",
    "\n",
    "    def get_year(self):\n",
    "        return self.__year\n",
    "\n",
    "    def get_mileage(self):\n",
    "        return self.__mileage\n",
    "\n",
    "    def set_make(self, vmk):\n",
    "        self.__make = vmk\n",
    "\n",
    "    def set_model(self, vmd):\n",
    "        self.__model = vmd\n",
    "\n",
    "    def set_year(self, vy):\n",
    "        self.__year = vy\n",
    "\n",
    "    def set_mileage(self, vml):\n",
    "        self.__mileage = vml\n",
    "\n",
    "    def __str__(self):\n",
    "        return \"Make: \" + self.__make + \"; Model: \" + self.__model + \"; Year of Manufacture: \" + str(self.__year) + \"; Mileage: \" + str(self.__mileage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bfc1ed0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make: Honda; Model: Civic; Year of Manufacture: 2014; Mileage: 50000\n",
      "The mileage of this vehicle is: 50000\n",
      "The year of manufacture of this vehicle is: 2012\n"
     ]
    }
   ],
   "source": [
    "vehicle1=Vehicle(\"Honda\",\"Civic\",2014,50000)\n",
    "print(vehicle1)\n",
    "print(\"The mileage of this vehicle is:\", vehicle1.get_mileage())\n",
    "vehicle1.set_year(2012)\n",
    "print(\"The year of manufacture of this vehicle is:\", vehicle1.get_year())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0e396074",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Employee:\n",
    "    def __init__(self, nm, addr, veh):\n",
    "        self.__emp_name = nm\n",
    "        self.__emp_addr = addr\n",
    "        self.__vehicle = veh\n",
    "\n",
    "    def get_emp_name(self):\n",
    "        return self.__emp_name\n",
    "\n",
    "    def get_emp_addr(self):\n",
    "        return self.__emp_addr\n",
    "\n",
    "    def get_vehicle(self):\n",
    "        return self.__vehicle\n",
    "\n",
    "    def set_emp_name(self, nm):\n",
    "        self.__emp_name = nm\n",
    "\n",
    "    def set_emp_addr(self, addr):\n",
    "        self.__emp_addr = addr\n",
    "\n",
    "    def set_vehicle(self, veh):\n",
    "        self.__vehicle = veh\n",
    "\n",
    "    def compute_compensation(self):\n",
    "        pass\n",
    "\n",
    "    def __str__(self):\n",
    "        allData = \"\\nEmployee Name: \" + self.__emp_name\n",
    "        allData += \"; Employee Address: \" + str(self.__emp_addr)\n",
    "        allData +=  \"\\n\" + self.__vehicle.__str__()\n",
    "        return allData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "93abcbf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Employee Name: Amy; Employee Address: 100 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2012; Mileage: 50000\n",
      "Amy lives at 100 W Campbell Road, Richardson, Texas, 75080.\n",
      "Amy owns a Honda Civic vehicle.\n",
      "Amy lives at 800 E Campbell Road, Richardson, Texas, 75080.\n"
     ]
    }
   ],
   "source": [
    "emp1=Employee(\"Amy\", \"100 W Campbell Road, Richardson, Texas, 75080\",vehicle1)\n",
    "print(emp1)\n",
    "print(\"{0} lives at {1}.\".format(emp1.get_emp_name(),emp1.get_emp_addr()))\n",
    "print(\"{0} owns a {1} {2} vehicle.\".format(emp1.get_emp_name(),emp1.get_vehicle().get_make(),emp1.get_vehicle().get_model()))\n",
    "emp1.set_emp_addr(\"800 E Campbell Road, Richardson, Texas, 75080\")\n",
    "print(\"{0} lives at {1}.\".format(emp1.get_emp_name(),emp1.get_emp_addr()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1219188f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FullTimeEmployee(Employee):\n",
    "\n",
    "    def __init__(self, nm, addr, veh, sal):\n",
    "        Employee.__init__(self,nm, addr, veh)\n",
    "        self.__salary = sal\n",
    "\n",
    "    def get_salary(self):\n",
    "        return self.__salary\n",
    "\n",
    "    def set_salary(self, sal):\n",
    "        self.__salary = sal\n",
    "\n",
    "    def compute_compensation(self):\n",
    "        if self.__salary <= 25000:\n",
    "            annual_compensation = self.__salary * (1 - 0.18)\n",
    "        elif self.__salary <= 55000:\n",
    "            annual_compensation = (self.__salary)-((25000*0.18) + (self.__salary-25000)*0.28)\n",
    "        else:\n",
    "            annual_compensation = (self.__salary)-((25000*0.18)+((55000-25000)*0.28)+((self.__salary-55000)*0.33))\n",
    "        return (annual_compensation/52)\n",
    "    \n",
    "    def compute_reimbursement(self,annual_expense):\n",
    "        if annual_expense <= 10000:\n",
    "            reimbursement=annual_expense\n",
    "        else:\n",
    "            reimbursement=10000+(annual_expense-10000)*0.5\n",
    "        return (reimbursement/52)\n",
    "        \n",
    "\n",
    "    def __str__(self):\n",
    "\n",
    "        childData = super().__str__()\n",
    "        childData = \"\\nDetails of this Full Time Employee are:\" + childData\n",
    "        childData += \"\\nSalary: \" + '{0:0.2f}'.format(self.__salary)\n",
    "        return childData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0b64cf4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Amy; Employee Address: 100 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2012; Mileage: 50000\n",
      "Salary: 40000.00\n",
      "Amy has an annual salary of $40000.\n",
      "Amy has a weekly compensation of $601.92.\n",
      "Amy has a weekly reimbursement of $211.54.\n",
      "Amy has an annual salary of $50000.\n"
     ]
    }
   ],
   "source": [
    "emp2=FullTimeEmployee(\"Amy\", \"100 W Campbell Road, Richardson, Texas, 75080\", vehicle1, 40000)\n",
    "print(emp2)\n",
    "print(\"{0} has an annual salary of ${1}.\".format(emp2.get_emp_name(),emp2.get_salary()))\n",
    "print(\"{0} has a weekly compensation of ${1:0.2f}.\".format(emp2.get_emp_name(),emp2.compute_compensation()))\n",
    "print(\"{0} has a weekly reimbursement of ${1:0.2f}.\".format(emp2.get_emp_name(),emp2.compute_reimbursement(12000)))\n",
    "emp2.set_salary(50000)\n",
    "print(\"{0} has an annual salary of ${1}.\".format(emp2.get_emp_name(),emp2.get_salary()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "772dccee",
   "metadata": {},
   "outputs": [],
   "source": [
    "class HourlyEmployee(Employee):\n",
    "\n",
    "    def __init__(self, nm, addr, veh, hw, hr):\n",
    "        Employee.__init__(self,nm, addr, veh)\n",
    "        self.__hours_wrkd = hw\n",
    "        self.__hourly_rate = hr\n",
    "\n",
    "    def get_hours_worked(self):\n",
    "        return self.__hours_wrkd\n",
    "\n",
    "    def get_hourly_rate(self):\n",
    "        return self.__hourly_rate            \n",
    "\n",
    "    def set_hours_worked(self, hw):\n",
    "        self.__hours_wrkd = hw\n",
    "\n",
    "    def set_hourly_rate(self, hr):\n",
    "        self.__hourly_rate = hr\n",
    "\n",
    "    def compute_compensation(self):\n",
    "        if self.__hours_wrkd > 40:\n",
    "            return self.__hourly_rate * 40 + self.__hourly_rate * 1.8 * (self.__hours_wrkd - 40)\n",
    "        else:\n",
    "            return self.__hourly_rate * self.__hours_wrkd\n",
    "        \n",
    "    def compute_reimbursement(self,weekly_expense):\n",
    "        if weekly_expense <= 100:\n",
    "            reimbursement=weekly_expense\n",
    "        else:\n",
    "            reimbursement=100\n",
    "        return reimbursement\n",
    "\n",
    "    def __str__(self):\n",
    "        childData = super().__str__()\n",
    "        childData = \"\\nDetails of this Hourly Employee are:\" + childData\n",
    "        childData += \"\\nHours Worked: \" + str(self.__hours_wrkd)\n",
    "        childData += \"; Hourly Rate: \" + str(self.__hourly_rate)\n",
    "        return childData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "03c00a98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: Grace; Employee Address: 400 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2012; Mileage: 50000\n",
      "Hours Worked: 50; Hourly Rate: 20\n",
      "Grace works 50 hours per week at an hourly rate of $20.\n",
      "Grace has a weekly compensation of $1160.00.\n",
      "Grace has a weekly reimbursement of $100.00.\n",
      "Grace works 50 hours per week at an hourly rate of $22.\n"
     ]
    }
   ],
   "source": [
    "emp3=HourlyEmployee(\"Grace\", \"400 W Campbell Road, Richardson, Texas, 75080\", vehicle1,50,20)\n",
    "print(emp3)\n",
    "print(\"{0} works {1} hours per week at an hourly rate of ${2}.\".format(emp3.get_emp_name(),emp3.get_hours_worked(),emp3.get_hourly_rate()))\n",
    "print(\"{0} has a weekly compensation of ${1:0.2f}.\".format(emp3.get_emp_name(),emp3.compute_compensation()))\n",
    "print(\"{0} has a weekly reimbursement of ${1:0.2f}.\".format(emp3.get_emp_name(),emp3.compute_reimbursement(120)))\n",
    "emp3.set_hourly_rate(22)\n",
    "print(\"{0} works {1} hours per week at an hourly rate of ${2}.\".format(emp3.get_emp_name(),emp3.get_hours_worked(),emp3.get_hourly_rate()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0865acbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Consultant(Employee):\n",
    "\n",
    "    def __init__(self, nm, addr, veh, hw, pt):\n",
    "        Employee.__init__(self,nm, addr, veh)\n",
    "        self.__hours_wrkd = hw\n",
    "        self.__project_type = pt\n",
    "\n",
    "    def get_hours_worked(self):\n",
    "        return self.__hours_wrkd        \n",
    "\n",
    "    def get_project_type(self):\n",
    "        return self.__project_type\n",
    "\n",
    "    def set_hours_worked(self, hw):\n",
    "        self.__hours_wrkd = hw\n",
    "\n",
    "    def set_project_type(self, pt):\n",
    "        self.__project_type = pt\n",
    "\n",
    "    def compute_compensation(self):\n",
    "        if self.__project_type == 1:\n",
    "            hrly_rate = 55\n",
    "        elif self.__project_type == 2:\n",
    "            hrly_rate = 70\n",
    "        else:\n",
    "            hrly_rate = 85\n",
    "        return self.__hours_wrkd * hrly_rate\n",
    "    \n",
    "    def compute_reimbursement(self,weekly_expense):\n",
    "        if self.__project_type == 1:\n",
    "            reimbursement = weekly_expense \n",
    "        elif self.__project_type == 2:\n",
    "            reimbursement = weekly_expense * 0.9\n",
    "        elif self.__project_type == 3:\n",
    "            reimbursement = weekly_expense *0.8\n",
    "        return reimbursement\n",
    "\n",
    "    def __str__(self):\n",
    "        childData = super().__str__()\n",
    "        childData = \"\\nDetails of this Consultant are:\" + childData\n",
    "        childData += \"\\nHours Worked: \" + str(self.__hours_wrkd)\n",
    "        childData += \"; Project Type: \" + str(self.__project_type)\n",
    "        return childData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3309ecd8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Details of this Consultant are:\n",
      "Employee Name: Michael; Employee Address: 700 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2012; Mileage: 50000\n",
      "Hours Worked: 40; Project Type: 2\n",
      "Michael works 40 hours per week for type 2 project.\n",
      "Michael has a weekly compensation of $2800.00.\n",
      "Michael has a weekly reimbursement of $270.00.\n",
      "Michael works 35 hours per week for type 2 project.\n"
     ]
    }
   ],
   "source": [
    "emp4=Consultant(\"Michael\", \"700 W Campbell Road, Richardson, Texas, 75080\",vehicle1,40,2)\n",
    "print(emp4)\n",
    "print(\"{0} works {1} hours per week for type {2} project.\".format(emp4.get_emp_name(),emp4.get_hours_worked(),emp4.get_project_type()))\n",
    "print(\"{0} has a weekly compensation of ${1:0.2f}.\".format(emp4.get_emp_name(),emp4.compute_compensation()))\n",
    "print(\"{0} has a weekly reimbursement of ${1:0.2f}.\".format(emp4.get_emp_name(),emp4.compute_reimbursement(300)))\n",
    "emp4.set_hours_worked(35)\n",
    "print(\"{0} works {1} hours per week for type {2} project.\".format(emp4.get_emp_name(),emp4.get_hours_worked(),emp4.get_project_type()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2c725524",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Management(FullTimeEmployee,Consultant):\n",
    "    def __init__(self, nm, addr, veh, sal, hw, pt):\n",
    "        FullTimeEmployee.__init__(self, nm, addr, veh, sal)\n",
    "        Consultant.__init__(self, nm, addr, veh, hw, pt)\n",
    "        \n",
    "    def compute_compensation(self):\n",
    "        compensation = FullTimeEmployee.compute_compensation(self)+Consultant.compute_compensation(self)\n",
    "        return compensation\n",
    "    \n",
    "    def compute_reimbursement(self,annual_expense,weekly_expense):\n",
    "        reimbursement = FullTimeEmployee.compute_reimbursement(self,annual_expense)+Consultant.compute_reimbursement(self,weekly_expense)\n",
    "        return reimbursement\n",
    "    \n",
    "    def __str__(self):\n",
    "        childData = Employee.__str__(self)\n",
    "        childData=\"\\nDetails of this Management are:\"+childData\n",
    "        childData+=\"\\nSalary: \"+ '{0:0.2f}'.format(FullTimeEmployee.get_salary(self))\n",
    "        childData+= \"; Hours Worked: \"+str(Consultant.get_hours_worked(self))\n",
    "        childData+=\"; Project Type: \" + str(Consultant.get_project_type(self))\n",
    "        return childData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "50445455",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Jane; Employee Address: 1000 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2012; Mileage: 50000\n",
      "Salary: 120000.00; Hours Worked: 10; Project Type: 3\n",
      "\n",
      "\n",
      "Jane has an annual salary of $120000.\n",
      "Jane works 10 hours per week for type 3 project.\n",
      "Jane has a weekly compensation of $2497.12.\n",
      "Jane has a weekly reimbursement of $393.85.\n"
     ]
    }
   ],
   "source": [
    "emp5=Management(\"Jane\", \"1000 W Campbell Road, Richardson, Texas, 75080\",vehicle1,120000,10,3)\n",
    "print(emp5)\n",
    "print(\"\\n\")\n",
    "print(\"{0} has an annual salary of ${1}.\".format(emp5.get_emp_name(),emp5.get_salary()))\n",
    "print(\"{0} works {1} hours per week for type {2} project.\".format(emp5.get_emp_name(),emp5.get_hours_worked(),emp5.get_project_type()))\n",
    "print(\"{0} has a weekly compensation of ${1:0.2f}.\".format(emp5.get_emp_name(),emp5.compute_compensation()))\n",
    "print(\"{0} has a weekly reimbursement of ${1:0.2f}.\".format(emp5.get_emp_name(),emp5.compute_reimbursement(8000,300)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b5bee01a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_emp_input():\n",
    "    name=input(\"Enter the employee name: \")\n",
    "    address=input(\"Enter the employee's address: \")\n",
    "    return name,address"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9fb86b5f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the employee name: Bob\n",
      "Enter the employee's address: 350 E Campbell Road, Richardson, Texas, 75080\n",
      "Bob lives at 350 E Campbell Road, Richardson, Texas, 75080.\n"
     ]
    }
   ],
   "source": [
    "name, address=get_emp_input()\n",
    "print(\"{0} lives at {1}.\".format(name,address))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3a0d615f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_vehicle_input():\n",
    "    veh_make = input('Enter the vehicle make: ')\n",
    "    veh_model = input('Enter the vehicle model: ')\n",
    "    while True:\n",
    "        try:\n",
    "            veh_year= int(input('Enter the vehicle year: '))\n",
    "            if veh_year <1900 or veh_year>2023:\n",
    "                print(\"\\nPlease enter an integer value for year in the format of yyyy between 1900 and 2023.\")\n",
    "            else:\n",
    "                break\n",
    "        except ValueError as e:\n",
    "            print(\"Invalid input\",e)\n",
    "    while True:\n",
    "        try:\n",
    "            veh_mileage= int(input('Enter the vehicle mileage: '))\n",
    "            if veh_mileage<0:\n",
    "                print(\"\\nEnter a positive number for vehicle mileage.\")\n",
    "            else:\n",
    "                break\n",
    "        except ValueError:\n",
    "            print(\"\\nInvalid input. Enter a positive number.\")\n",
    "    \n",
    "    return (veh_make, veh_model, veh_year, veh_mileage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6d0c34dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the vehicle make: Ford\n",
      "Enter the vehicle model: Ranger\n",
      "Enter the vehicle year: 2025\n",
      "\n",
      "Please enter an integer value for year in the format of yyyy between 1900 and 2023.\n",
      "Enter the vehicle year: 2015\n",
      "Enter the vehicle mileage: 8000\n",
      "The vehicle entered is a Ford Ranger made in 2015 with 8000 mileage curently.\n"
     ]
    }
   ],
   "source": [
    "vehiclemake, vehiclemodel, vehicleyear, vehiclemileage = get_vehicle_input()  \n",
    "print(\"The vehicle entered is a {0} {1} made in {2} with {3} mileage curently.\".format(vehiclemake, vehiclemodel, vehicleyear, vehiclemileage))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d4d5ba8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_full_time_input():\n",
    "    salary=int(input(\"Enter the annual salary: \"))\n",
    "    return salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "36cd647d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the annual salary: 80000\n",
      "The annual salary entered is 80000.00\n"
     ]
    }
   ],
   "source": [
    "salary=get_full_time_input()\n",
    "print(\"The annual salary entered is {0:0.2f}\".format(salary))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "717bb36d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_hourly_input():\n",
    "    hours_worked=int(input(\"Enter the hours worked: \"))\n",
    "    hourly_rate=int(input(\"Enter the hourly rate: \"))\n",
    "    \n",
    "    return hours_worked,hourly_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96a492bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the hours worked: 30\n",
      "Enter the hourly rate: 20\n",
      "This hourly employee works 30 hours per week at an hourly rate of $20.00\n"
     ]
    }
   ],
   "source": [
    "hours_worked, hourly_rate = get_hourly_input()\n",
    "print(\"This hourly employee works {0} hours per week at an hourly rate of ${1:0.2f}\".format(hours_worked,hourly_rate))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6ceeb84b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_consultant_input():\n",
    "    hours_worked=int(input(\"Enter the hours worked: \"))\n",
    "    project_type=int(input(\"Project type? (Enter a number between 1 and 3): \"))\n",
    "    return hours_worked,project_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "55fcbca7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the hours worked: 40\n",
      "Project type? (Enter a number between 1 and 3): 2\n",
      "This consultant works 40 hours per week for type 2 project.\n"
     ]
    }
   ],
   "source": [
    "hours_worked, project_type = get_consultant_input()\n",
    "print(\"This consultant works {0} hours per week for type {1} project.\".format(hours_worked,project_type))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1ab38cb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_management_input():\n",
    "    salary=int(input(\"Enter the annual salary: \"))\n",
    "    hours_worked=int(input(\"Enter the hours worked: \"))\n",
    "    project_type=int(input(\"Project type? (Enter a number between 1 and 3): \"))\n",
    "    return salary,hours_worked,project_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cc7c8401",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the annual salary: 100000\n",
      "Enter the hours worked: 8\n",
      "Project type? (Enter a number between 1 and 3): 3\n",
      "This management has an annual salary of $100000.00. This management also works 8 hours per week additionally for type 3 project.\n"
     ]
    }
   ],
   "source": [
    "salary, hours_worked, project_type = get_management_input()\n",
    "print(\"This management has an annual salary of ${0:0.2f}. This management also works {1} hours per week additionally for type {2} project.\".format(salary, hours_worked,project_type))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "494ede30",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "def read_file_data():\n",
    "    emp_list=[]\n",
    "    try:\n",
    "        with open('empdata.dat', 'rb') as file:\n",
    "            while(True):\n",
    "                try:\n",
    "                    employee=pickle.load(file)\n",
    "                    emp_list.append(employee)\n",
    "                except EOFError:\n",
    "                    break\n",
    "    except FileNotFoundError:\n",
    "        print(\"No such file found.\")\n",
    "    return emp_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c13ad086",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 9 employees stored in the database.\n",
      "\n",
      "Below is the information of the first employee in the database: \n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Amy; Employee Address: 100 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2014; Mileage: 50000\n",
      "Salary: 40000.00\n",
      "\n",
      "Amy is the first employee.\n"
     ]
    }
   ],
   "source": [
    "emp_list=read_file_data()\n",
    "print(\"There are {} employees stored in the database.\".format(len(emp_list)))\n",
    "print(\"\\nBelow is the information of the first employee in the database: {}\".format(emp_list[0]))\n",
    "print(\"\\n{} is the first employee.\".format(emp_list[0].get_emp_name()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "dc5eb595",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_option1():\n",
    "    while True:\n",
    "        try:\n",
    "            sel = int(input(\"Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : \"))\n",
    "            if sel in range(1, 5):\n",
    "                break\n",
    "            else:\n",
    "                print(\"Please select an option from 1, 2, 3, and 4.\")\n",
    "        except ValueError:\n",
    "            print(\"Please select an option from 1, 2, 3, and 4.\")\n",
    "\n",
    "      \n",
    "         \n",
    "    name, address = get_emp_input()\n",
    "    \n",
    "    \n",
    "    vehiclemake, vehiclemodel, vehicleyear, vehiclemileage = get_vehicle_input()    \n",
    "    \n",
    "    \n",
    "    a_vehicle = Vehicle(vehiclemake, vehiclemodel, vehicleyear, vehiclemileage)\n",
    "    \n",
    "    if sel == 1:\n",
    "        sal = get_full_time_input()\n",
    "        an_emp = FullTimeEmployee(name, address, a_vehicle,sal)\n",
    "    elif sel == 2:\n",
    "        hw, hr = get_hourly_input()\n",
    "        an_emp = HourlyEmployee(name, address, a_vehicle, hw, hr)\n",
    "    elif sel == 3:\n",
    "        hw, pt = get_consultant_input()\n",
    "        an_emp = Consultant(name, address, a_vehicle, hw, pt)\n",
    "    elif sel ==4:\n",
    "        sal, hw, pt = get_management_input()\n",
    "        an_emp = Management(name, address, a_vehicle, sal, hw, pt)\n",
    "    \n",
    "    print(an_emp)\n",
    "    \n",
    "    print(\"\\n============================================================\")        \n",
    "    print(\"New employee entered successfully! Now going to the main menu.\")\n",
    "    print(\"==============================================================\")     \n",
    "    return an_emp    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cc34f40f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : 5\n",
      "Please select an option from 1, 2, 3, and 4.\n",
      "Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : zzz\n",
      "Please select an option from 1, 2, 3, and 4.\n",
      "Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : 4\n",
      "Enter the employee name: David\n",
      "Enter the employee's address: 103 E Campbell Road, Richardson, Texas, 75080\n",
      "Enter the vehicle make: BMW\n",
      "Enter the vehicle model: X3\n",
      "Enter the vehicle year: 2018\n",
      "Enter the vehicle mileage: 5000\n",
      "Enter the annual salary: 110000\n",
      "Enter the hours worked: 5\n",
      "Project type? (Enter a number between 1 and 3): 2\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: David; Employee Address: 103 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: BMW; Model: X3; Year of Manufacture: 2018; Mileage: 5000\n",
      "Salary: 110000.00; Hours Worked: 5; Project Type: 2\n",
      "\n",
      "============================================================\n",
      "New employee entered successfully! Now going to the main menu.\n",
      "==============================================================\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.Management at 0x7fc9b3bd8890>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_option1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "06d9b88f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_option2(my_lst):\n",
    "    while True:\n",
    "        try:\n",
    "            sel = int(input(\"Do you want to see information of all employees (input 1) or the first 5 employees (input 2)?: \"))\n",
    "            if sel in range(1, 3):\n",
    "                break\n",
    "            else:\n",
    "                print(\"Please select 1 or 2\")\n",
    "        except ValueError:\n",
    "            print(\"Please select 1 or 2\")\n",
    "            \n",
    "    if sel == 1:\n",
    "        print(\"\\n============================================================\")        \n",
    "        print(\"Below is the information of all the employees stored in the database.\")\n",
    "        print(\"==============================================================\") \n",
    "        for emp in my_lst:\n",
    "            print(emp)\n",
    "    else:\n",
    "        print(\"\\n============================================================\")        \n",
    "        print(\"Below is the information of the first 5 employees stored in the database.\")\n",
    "        print(\"==============================================================\") \n",
    "        for emp in my_lst[0:5]:\n",
    "            print(emp)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c48c9cb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Do you want to see information of all employees (input 1) or the first 5 employees (input 2)?: 3\n",
      "Please select 1 or 2\n",
      "Do you want to see information of all employees (input 1) or the first 5 employees (input 2)?: zzz\n",
      "Please select 1 or 2\n",
      "Do you want to see information of all employees (input 1) or the first 5 employees (input 2)?: 2\n",
      "\n",
      "============================================================\n",
      "Below is the information of the first 5 employees stored in the database.\n",
      "==============================================================\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Amy; Employee Address: 100 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2014; Mileage: 50000\n",
      "Salary: 40000.00\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Bob; Employee Address: 200 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Toyota; Model: Camry; Year of Manufacture: 2010; Mileage: 60000\n",
      "Salary: 80000.00\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Evan; Employee Address: 300 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: BMW; Model: X3; Year of Manufacture: 2016; Mileage: 30000\n",
      "Salary: 120000.00\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: Grace; Employee Address: 400 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Kia; Model: Rio; Year of Manufacture: 2005; Mileage: 150000\n",
      "Hours Worked: 50; Hourly Rate: 20\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: James; Employee Address: 500 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Mazda; Model: Mazda3; Year of Manufacture: 2010; Mileage: 80000\n",
      "Hours Worked: 30; Hourly Rate: 25\n"
     ]
    }
   ],
   "source": [
    "run_option2(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e905e441",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_option3(my_lst):\n",
    "    print(\"\\nEmployee name and Compensation of all Employees\")\n",
    "    print(\"=================================================\")\n",
    "    for employee in my_lst:\n",
    "        print(f\"{employee._Employee__emp_name}'s weekly compensation is ${employee.compute_compensation():.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "91e54e4f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Employee name and Compensation of all Employees\n",
      "=================================================\n",
      "Amy's weekly compensation is $601.92\n",
      "Bob's weekly compensation is $1131.73\n",
      "Evan's weekly compensation is $1647.12\n",
      "Grace's weekly compensation is $1160.00\n",
      "James's weekly compensation is $750.00\n",
      "Luna's weekly compensation is $300.00\n",
      "Michael's weekly compensation is $2200.00\n",
      "Tom's weekly compensation is $3500.00\n",
      "Zoey's weekly compensation is $2550.00\n"
     ]
    }
   ],
   "source": [
    "run_option3(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fa3837c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_option4(my_lst):\n",
    "    name = input(\"Please enter the name of the employee you want to search: \")\n",
    "    match= []\n",
    "    for emp in my_lst:\n",
    "        if name.lower() == emp._Employee__emp_name.lower():\n",
    "            match.append(emp)\n",
    "    \n",
    "    if match:\n",
    "        print(\"==========================================================================\")\n",
    "        print(\"Below is the information of all employees that match the name you entered.\")\n",
    "        print(\"==========================================================================\")\n",
    "        for emp in match:\n",
    "            print(emp)\n",
    "        return match\n",
    "    else:\n",
    "        print(\"There is no employee matching the name you entered.\")\n",
    "        return []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "19d7189d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the name of the employee you want to search: TOM\n",
      "==========================================================================\n",
      "Below is the information of all employees that match the name you entered.\n",
      "==========================================================================\n",
      "\n",
      "Details of this Consultant are:\n",
      "Employee Name: Tom; Employee Address: 800 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Mercedes-Benz; Model: GLE350; Year of Manufacture: 2018; Mileage: 30000\n",
      "Hours Worked: 50; Project Type: 2\n",
      "\n",
      "There are 1 employees matching your search.\n"
     ]
    }
   ],
   "source": [
    "matched_emp_list=run_option4(emp_list)\n",
    "print(\"\\nThere are {} employees matching your search.\".format(len(matched_emp_list)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1746dd26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the name of the employee you want to search: Hongchang\n",
      "There is no employee matching the name you entered.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_option4(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d03e1491",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_option5(my_lst):\n",
    "    max_compensation=0\n",
    "    total=0\n",
    "    mean_compensation=0\n",
    "    count_mileage=0\n",
    "    \n",
    "    for emp in emp_list:\n",
    "        if emp.compute_compensation()>max_compensation:\n",
    "            max_compensation=emp.compute_compensation()\n",
    "    \n",
    "    for emp in emp_list:\n",
    "        total+=emp.compute_compensation()\n",
    "    mean_compensation=total/len(emp_list)\n",
    "        \n",
    "    for emp in emp_list:\n",
    "        if emp.get_vehicle().get_mileage()>100000:\n",
    "            count_mileage+=1\n",
    "    \n",
    "    print(\"\\n========================================================\")\n",
    "    print(\"Below is the statistics of all employees in this database.\")\n",
    "    print(\"========================================================\")\n",
    "    print(f'There are {len(emp_list)} emplyees stored in this employee database.')\n",
    "    print(f'The highest weekly compensation is ${max_compensation}.')\n",
    "    print(f'The mean weekly compensation is: ${mean_compensation:.2f}.')\n",
    "    print(f'The number of employees who have a vehicle with over 100,000 mileage is {count_mileage}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "85ce8bda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "========================================================\n",
      "Below is the statistics of all employees in this database.\n",
      "========================================================\n",
      "There are 9 emplyees stored in this employee database.\n",
      "The highest weekly compensation is $3500.\n",
      "The mean weekly compensation is: $1537.86.\n",
      "The number of employees who have a vehicle with over 100,000 mileage is 2.\n"
     ]
    }
   ],
   "source": [
    "run_option5(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2c9db684",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_option6(emp_list):\n",
    "    matched_list=run_option4(emp_list)\n",
    "    choice=int(input(\"Which employee do you want to check (enter a number)?: \"))\n",
    "    emp=matched_list[choice-1]\n",
    "    \n",
    "    expense=int(input(\"What is the annual expense?: \"))\n",
    "    reimbursement=emp.compute_reimbursement(expense)\n",
    "    print(\"\\n############################################################\")\n",
    "    print(f'This employee should have a weekly reimbursement of ${reimbursement:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "64fc90f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the name of the employee you want to search: bob\n",
      "==========================================================================\n",
      "Below is the information of all employees that match the name you entered.\n",
      "==========================================================================\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Bob; Employee Address: 200 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Toyota; Model: Camry; Year of Manufacture: 2010; Mileage: 60000\n",
      "Salary: 80000.00\n",
      "Which employee do you want to check (enter a number)?: 1\n",
      "What is the annual expense?: 8000\n",
      "\n",
      "############################################################\n",
      "This employee should have a weekly reimbursement of $153.85\n"
     ]
    }
   ],
   "source": [
    "run_option6(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "469218d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the name of the employee you want to search: james\n",
      "==========================================================================\n",
      "Below is the information of all employees that match the name you entered.\n",
      "==========================================================================\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: James; Employee Address: 500 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Mazda; Model: Mazda3; Year of Manufacture: 2010; Mileage: 80000\n",
      "Hours Worked: 30; Hourly Rate: 25\n",
      "Which employee do you want to check (enter a number)?: 1\n",
      "What is the annual expense?: 130\n",
      "\n",
      "############################################################\n",
      "This employee should have a weekly reimbursement of $100.00\n"
     ]
    }
   ],
   "source": [
    "run_option6(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5e595cf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "\n",
    "def run_option7(my_lst):\n",
    "    \n",
    "    print(\"You chose to exit the program.\")\n",
    "    choice=input(\"Are you sure (Y/N)?: \")\n",
    "    if choice.lower() !='y' and choice.lower() !='n':\n",
    "        print(\"\\nYour input doesn't match any valid option and has been considered as 'N'.\")\n",
    "        print(\"Going back to the selection menu.\")\n",
    "    elif choice.lower() == 'y':\n",
    "        with open(\"empdata_updated.dat\", \"wb\") as f:\n",
    "            pickle.dump(emp_list, f)\n",
    "        print(\"\\n=================================\")\n",
    "        print(\"Program successfully being closed\")\n",
    "        print(\"=================================\")\n",
    "        sys.exit()\n",
    "    else:\n",
    "        print(\"\\n=================================\")\n",
    "        print(\"Going back to the selection menu.\")\n",
    "        print(\"=================================\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c008ebcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You chose to exit the program.\n",
      "Are you sure (Y/N)?: b\n",
      "\n",
      "Your input doesn't match any valid option and has been considered as 'N'.\n",
      "Going back to the selection menu.\n"
     ]
    }
   ],
   "source": [
    "run_option7(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "34f5938d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You chose to exit the program.\n",
      "Are you sure (Y/N)?: n\n",
      "\n",
      "=================================\n",
      "Going back to the selection menu.\n",
      "=================================\n"
     ]
    }
   ],
   "source": [
    "run_option7(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "235f01e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You chose to exit the program.\n",
      "Are you sure (Y/N)?: y\n",
      "\n",
      "=================================\n",
      "Program successfully being closed\n",
      "=================================\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/darshan/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3465: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "run_option7(emp_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f8c9183b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_menu_options():\n",
    "    #read employee objects in to a list\n",
    "    emp_list = read_file_data()\n",
    "    \n",
    "    sel = 1\n",
    "    while sel <=  7 and sel >= 1:\n",
    "       \n",
    "        print(\"\\n==== Menu ====\")\n",
    "        print(\"1. To add an employee\")\n",
    "        print(\"2. To print the name and address of employees\")\n",
    "        print(\"3. To print the employee name and compensation of all employees\")\n",
    "        print(\"4. To search for employees by name\")\n",
    "        print(\"5. To check the basic statistics of employees\")\n",
    "        print(\"6. To calculate the reimbursement of one employee\")\n",
    "        print(\"7. To exit program\")\n",
    "        \n",
    "        try:\n",
    "            sel=int(input(\"Your selection is: \"))    \n",
    "        except ValueError:\n",
    "            print(\"\\n=========================================\")\n",
    "            print(\"You must enter an integer between 1 and 7!\")\n",
    "            print(\"=========================================\\n\")\n",
    "            sel=1\n",
    "            continue\n",
    "        \n",
    "        if sel == 1:\n",
    "            emp_list.append(run_option1())\n",
    "        elif sel == 2:\n",
    "            run_option2(emp_list)\n",
    "        elif sel == 3:\n",
    "            run_option3(emp_list)\n",
    "        elif sel == 4:\n",
    "            run_option4(emp_list)\n",
    "        elif sel == 5:\n",
    "            run_option5(emp_list)\n",
    "        elif sel == 6:\n",
    "            run_option6(emp_list)\n",
    "        elif sel == 7:  \n",
    "            run_option7(emp_list)\n",
    "        else:\n",
    "            print(\"\\n=========================================\")\n",
    "            print(\"You must enter an integer between 1 and 7!\")\n",
    "            print(\"=========================================\\n\")\n",
    "            sel = 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8c2bb3cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 0\n",
      "\n",
      "=========================================\n",
      "You must enter an integer between 1 and 7!\n",
      "=========================================\n",
      "\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 8\n",
      "\n",
      "=========================================\n",
      "You must enter an integer between 1 and 7!\n",
      "=========================================\n",
      "\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: zzz\n",
      "\n",
      "=========================================\n",
      "You must enter an integer between 1 and 7!\n",
      "=========================================\n",
      "\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 7\n",
      "You chose to exit the program.\n",
      "Are you sure (Y/N)?: n\n",
      "\n",
      "=================================\n",
      "Going back to the selection menu.\n",
      "=================================\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 7\n",
      "You chose to exit the program.\n",
      "Are you sure (Y/N)?: y\n",
      "\n",
      "=================================\n",
      "Program successfully being closed\n",
      "=================================\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "run_menu_options()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b073c436",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 1\n",
      "Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : 4\n",
      "Enter the employee name: David\n",
      "Enter the employee's address: 103 E Campbell Road, Richardson, Texas, 75080\n",
      "Enter the vehicle make: BMW\n",
      "Enter the vehicle model: X3\n",
      "Enter the vehicle year: 2018\n",
      "Enter the vehicle mileage: 5000\n",
      "Enter the annual salary: 110000\n",
      "Enter the hours worked: 5\n",
      "Project type? (Enter a number between 1 and 3): 2\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: David; Employee Address: 103 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: BMW; Model: X3; Year of Manufacture: 2018; Mileage: 5000\n",
      "Salary: 110000.00; Hours Worked: 5; Project Type: 2\n",
      "\n",
      "============================================================\n",
      "New employee entered successfully! Now going to the main menu.\n",
      "==============================================================\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 1\n",
      "Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : 4\n",
      "Enter the employee name: Grace\n",
      "Enter the employee's address: 105 E Campbell Road, Richardson, Texas, 75080\n",
      "Enter the vehicle make: Porsche\n",
      "Enter the vehicle model: Cayenne\n",
      "Enter the vehicle year: 2019\n",
      "Enter the vehicle mileage: 3000\n",
      "Enter the annual salary: 180000\n",
      "Enter the hours worked: 8\n",
      "Project type? (Enter a number between 1 and 3): 1\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Grace; Employee Address: 105 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: Porsche; Model: Cayenne; Year of Manufacture: 2019; Mileage: 3000\n",
      "Salary: 180000.00; Hours Worked: 8; Project Type: 1\n",
      "\n",
      "============================================================\n",
      "New employee entered successfully! Now going to the main menu.\n",
      "==============================================================\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 1\n",
      "Type of Employee?(1-Full Time;2-Hourly;3-Consultant;4-Management) : 4\n",
      "Enter the employee name: Zoey\n",
      "Enter the employee's address: 107 E Campbell Road, Richardson, Texas, 75080\n",
      "Enter the vehicle make: Audi\n",
      "Enter the vehicle model: A3\n",
      "Enter the vehicle year: 2022\n",
      "Enter the vehicle mileage: 3000\n",
      "Enter the annual salary: 90000\n",
      "Enter the hours worked: 10\n",
      "Project type? (Enter a number between 1 and 3): 3\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Zoey; Employee Address: 107 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: Audi; Model: A3; Year of Manufacture: 2022; Mileage: 3000\n",
      "Salary: 90000.00; Hours Worked: 10; Project Type: 3\n",
      "\n",
      "============================================================\n",
      "New employee entered successfully! Now going to the main menu.\n",
      "==============================================================\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 2\n",
      "Do you want to see information of all employees (input 1) or the first 5 employees (input 2)?: 1\n",
      "\n",
      "============================================================\n",
      "Below is the information of all the employees stored in the database.\n",
      "==============================================================\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Amy; Employee Address: 100 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Honda; Model: Civic; Year of Manufacture: 2014; Mileage: 50000\n",
      "Salary: 40000.00\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Bob; Employee Address: 200 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Toyota; Model: Camry; Year of Manufacture: 2010; Mileage: 60000\n",
      "Salary: 80000.00\n",
      "\n",
      "Details of this Full Time Employee are:\n",
      "Employee Name: Evan; Employee Address: 300 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: BMW; Model: X3; Year of Manufacture: 2016; Mileage: 30000\n",
      "Salary: 120000.00\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: Grace; Employee Address: 400 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Kia; Model: Rio; Year of Manufacture: 2005; Mileage: 150000\n",
      "Hours Worked: 50; Hourly Rate: 20\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: James; Employee Address: 500 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Mazda; Model: Mazda3; Year of Manufacture: 2010; Mileage: 80000\n",
      "Hours Worked: 30; Hourly Rate: 25\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: Luna; Employee Address: 600 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Nissan; Model: Sentra; Year of Manufacture: 2005; Mileage: 160000\n",
      "Hours Worked: 20; Hourly Rate: 15\n",
      "\n",
      "Details of this Consultant are:\n",
      "Employee Name: Michael; Employee Address: 700 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Ford; Model: Ranger; Year of Manufacture: 2011; Mileage: 80000\n",
      "Hours Worked: 40; Project Type: 1\n",
      "\n",
      "Details of this Consultant are:\n",
      "Employee Name: Tom; Employee Address: 800 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Mercedes-Benz; Model: GLE350; Year of Manufacture: 2018; Mileage: 30000\n",
      "Hours Worked: 50; Project Type: 2\n",
      "\n",
      "Details of this Consultant are:\n",
      "Employee Name: Zoey; Employee Address: 900 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Tesla; Model: Model3; Year of Manufacture: 2018; Mileage: 15000\n",
      "Hours Worked: 30; Project Type: 3\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: David; Employee Address: 103 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: BMW; Model: X3; Year of Manufacture: 2018; Mileage: 5000\n",
      "Salary: 110000.00; Hours Worked: 5; Project Type: 2\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Grace; Employee Address: 105 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: Porsche; Model: Cayenne; Year of Manufacture: 2019; Mileage: 3000\n",
      "Salary: 180000.00; Hours Worked: 8; Project Type: 1\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Zoey; Employee Address: 107 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: Audi; Model: A3; Year of Manufacture: 2022; Mileage: 3000\n",
      "Salary: 90000.00; Hours Worked: 10; Project Type: 3\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 3\n",
      "\n",
      "Employee name and Compensation of all Employees\n",
      "=================================================\n",
      "Amy's weekly compensation is $601.92\n",
      "Bob's weekly compensation is $1131.73\n",
      "Evan's weekly compensation is $1647.12\n",
      "Grace's weekly compensation is $1160.00\n",
      "James's weekly compensation is $750.00\n",
      "Luna's weekly compensation is $300.00\n",
      "Michael's weekly compensation is $2200.00\n",
      "Tom's weekly compensation is $3500.00\n",
      "Zoey's weekly compensation is $2550.00\n",
      "David's weekly compensation is $1868.27\n",
      "Grace's weekly compensation is $2860.19\n",
      "Zoey's weekly compensation is $2110.58\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 4\n",
      "Please enter the name of the employee you want to search: grace\n",
      "==========================================================================\n",
      "Below is the information of all employees that match the name you entered.\n",
      "==========================================================================\n",
      "\n",
      "Details of this Hourly Employee are:\n",
      "Employee Name: Grace; Employee Address: 400 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Kia; Model: Rio; Year of Manufacture: 2005; Mileage: 150000\n",
      "Hours Worked: 50; Hourly Rate: 20\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Grace; Employee Address: 105 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: Porsche; Model: Cayenne; Year of Manufacture: 2019; Mileage: 3000\n",
      "Salary: 180000.00; Hours Worked: 8; Project Type: 1\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selection is: 5\n",
      "\n",
      "========================================================\n",
      "Below is the statistics of all employees in this database.\n",
      "========================================================\n",
      "There are 9 emplyees stored in this employee database.\n",
      "The highest weekly compensation is $3500.\n",
      "The mean weekly compensation is: $1537.86.\n",
      "The number of employees who have a vehicle with over 100,000 mileage is 2.\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 6\n",
      "Please enter the name of the employee you want to search: ZOEY\n",
      "==========================================================================\n",
      "Below is the information of all employees that match the name you entered.\n",
      "==========================================================================\n",
      "\n",
      "Details of this Consultant are:\n",
      "Employee Name: Zoey; Employee Address: 900 W Campbell Road, Richardson, Texas, 75080\n",
      "Make: Tesla; Model: Model3; Year of Manufacture: 2018; Mileage: 15000\n",
      "Hours Worked: 30; Project Type: 3\n",
      "\n",
      "Details of this Management are:\n",
      "Employee Name: Zoey; Employee Address: 107 E Campbell Road, Richardson, Texas, 75080\n",
      "Make: Audi; Model: A3; Year of Manufacture: 2022; Mileage: 3000\n",
      "Salary: 90000.00; Hours Worked: 10; Project Type: 3\n",
      "Which employee do you want to check (enter a number)?: 1\n",
      "What is the annual expense?: 120\n",
      "\n",
      "############################################################\n",
      "This employee should have a weekly reimbursement of $96.00\n",
      "\n",
      "==== Menu ====\n",
      "1. To add an employee\n",
      "2. To print the name and address of employees\n",
      "3. To print the employee name and compensation of all employees\n",
      "4. To search for employees by name\n",
      "5. To check the basic statistics of employees\n",
      "6. To calculate the reimbursement of one employee\n",
      "7. To exit program\n",
      "Your selection is: 7\n",
      "You chose to exit the program.\n",
      "Are you sure (Y/N)?: y\n",
      "\n",
      "=================================\n",
      "Program successfully being closed\n",
      "=================================\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "run_menu_options()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66ec08e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
